@using System.Diagnostics.CodeAnalysis
@using System.Reflection
@using System.Runtime.InteropServices
@using BlazingStory.Internals.Services.XmlDocComment;
@using BlazingStory.Internals.Types
@using Toolbelt.Blazor.Extensions.DependencyInjection
@using static System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes

@implements IAsyncDisposable

@inject IServiceProvider GlobalServices
@inject IJSRuntime JSRuntime
@inject ILoggerFactory LoggerFactory
@inject NavigationManager NavigationManager

<style>
    .default-background {
    position: fixed;
    inset: 0;
    background-color: #f6f9fc;
    }

    @@media (prefers-color-scheme: dark) {
    .default-background {
    background-color: #222425;
    }
    }

    .default-background.init-level-3 {
    display: none;
    }
</style>

@*
    By default, the html element is unscrollable.
    This is required to make annoying scroll bars invisible while adjusting the preview frame size to fit iframe contents on "Docs" pages.
    After adjustment, the "_blazing_story_ready_for_visible" CSS class is added, and then the preview frame contents are scrollable.
    (See also: BlazingStory/Internals/Pages/IFrame.razor.ts)
*@
<style>
    html:not(._blazing_story_ready_for_visible) {
    overflow: hidden;
    }
</style>

<div class="default-background init-level-@(this._InitLevel)"></div>

<CascadingValue TValue="IServiceProvider" Value="this._ServiceScope?.ServiceProvider">

    <StoriesRazorDetector Assemblies="this.Assemblies" StoriesStore="this._StoriesStore" />
    <CascadingValue Value="this._AddonsStore">

        <div style="display:none;">
            @{ #pragma warning disable IL2111 }
            @foreach (var addonType in this._AddonsTypes)
            {
                <DynamicComponent @key="addonType" Type="addonType" />
            }
            @{ #pragma warning restore IL2111 }
        </div>

        <div class="color-scheme-container preferes-color-scheme-@this._PreferesColorScheme" style="transition: opacity 0.2s linear; opacity: @(this._InitLevel >=2 ? 1 : 0); visibility: @(this._InitLevel >= 1 ? "visible" : "hidden");">
            <CascadingValue Value="this._StoriesStore">
                <CascadingValue Value="this._CustomPageStore">
                    <CascadingValue Value="this">

                        <Router AppAssembly="@typeof(BlazingStoryApp).Assembly">
                            <Found Context="routeData">
                                <RouteView RouteData="@routeData" DefaultLayout="@typeof(MainLayout)" />
                            </Found>
                            <NotFound>
                                <PageTitle>Not found</PageTitle>
                                @{ #pragma warning disable IL2111 }
                                <LayoutView Layout="@typeof(MainLayout)">
                                    <p role="alert" style="padding:12px 32px;">Sorry, there's nothing at this address.</p>
                                </LayoutView>
                                @{ #pragma warning restore IL2111 }
                            </NotFound>
                        </Router>

                    </CascadingValue>
                </CascadingValue>
            </CascadingValue>
        </div>

    </CascadingValue>
</CascadingValue>

@code
{
    /// <summary>
    /// A collection of assemblies to search for stories.
    /// </summary>
    [Parameter, EditorRequired]
    public IEnumerable<Assembly>? Assemblies { get; set; }

    /// <summary>
    /// A title string of this Blazing Story app. (The default value is "Blazing Story")<br/>
    /// This is used for the title of every HTML document. And also, this is used for the brand logo unless you customize the logo contents using <see cref="BrandLogoArea"/> render fragment parameter.
    /// </summary>
    [Parameter]
    public string? Title { get; set; } = "Blazing Story";

    /// <summary>
    /// A type of the default layout component to use when displaying a story.
    /// </summary>
    [DynamicallyAccessedMembers(All)]
    [Parameter]
    public Type? DefaultLayout { get; set; }

    /// <summary>
    /// Content for the brand logo area at the top of the sidebar.<br/>
    /// You can refer to the instance of the <see cref="BlazingStoryApp"/> component via <c>context</c> argument in the rendered fragment.
    /// </summary>
    [Parameter]
    public RenderFragment<BlazingStoryApp>? BrandLogoArea { get; set; }

    /// <summary>
    /// The available color schemes for the Blazing Story.<br/>
    /// When the <see cref="AvailableColorSchemes.Light"/> is set, the Blazing Story app will be displayed in light mode only.<br/>
    /// When the <see cref="AvailableColorSchemes.Dark"/> is set, the Blazing Story app will be displayed in dark mode only.<br/>
    /// The default value is <see cref="AvailableColorSchemes.Both"/>, and system preference will be respected.
    /// </summary>
    // TODO:
    // The default value is <see cref="AvailableColorSchemes.Both"/>, and user preference will be respected.
    // The user preference page will be displayed only when the <see cref="AvailableColorSchemes.Both"/> is set.
    [Parameter]
    public AvailableColorSchemes AvailableColorSchemes { get; set; } = AvailableColorSchemes.Both;

    [Parameter]
    public IList<NavigationTreeOrdering>? OrderNavigation { get; set; }

    /// <summary>
    /// [Preview feature] Gets or sets whether to enable hot reloading. (default: false)
    /// </summary>
    [Parameter]
    public bool EnableHotReloading { get; set; }

    private AvailableColorSchemes _PrevAvailableColorSchemes = AvailableColorSchemes.Both;

    private StoriesStore _StoriesStore = new();

    private CustomPageStore _CustomPageStore = new();

    private readonly AddonsStore _AddonsStore = new();

    private bool _firstRendered = false;

    private int _InitLevel = 0;

    private AsyncServiceScope? _ServiceScope;

    private readonly JSModule _JSModule;

    private DotNetObjectReference<BlazingStoryApp> _RefThis;

    private string _PreferesColorScheme = "light";

    private IJSObjectReference? _PreferesColorSchemeChangeSubscriber;

    private readonly BlazingStoryOptions _Options = new();

    public BlazingStoryApp()
    {
        this._JSModule = new(() => this.JSRuntime, "Components/BlazingStoryApp.razor.js");
#pragma warning disable IL2111
        this._RefThis = DotNetObjectReference.Create(this);
#pragma warning restore IL2111
    }

    private readonly List<Type> _AddonsTypes = [];

    protected override void OnInitialized()
    {
        CustomPageRazorDetector.DetectAndRegisterToStore(Assemblies, _CustomPageStore);

        var injectedStoriesStore = this.GlobalServices.GetService<StoriesStore>();
        if (injectedStoriesStore is not null) this._StoriesStore = injectedStoriesStore;

        this.ConfigureAddons();
        this._ServiceScope = this.ConfigureServices();
    }

    private void RegisterAddon<[DynamicallyAccessedMembers(All)] TAddon>() => this._AddonsTypes.Add(typeof(TAddon));

    private void ConfigureAddons()
    {
        this.RegisterAddon<BlazingStory.Internals.Addons.Background.BackgroundAddon>();
        this.RegisterAddon<BlazingStory.Internals.Addons.Grid.GridAddon>();
        this.RegisterAddon<BlazingStory.Internals.Addons.ChangeSize.ChangeSizeAddon>();
        this.RegisterAddon<BlazingStory.Internals.Addons.Measure.MeasureAddon>();
        this.RegisterAddon<BlazingStory.Internals.Addons.Outlines.OutlinesAddon>();
    }

    private AsyncServiceScope ConfigureServices()
    {
        var services = new ServiceCollection()
            .AddSingleton<IJSRuntime>(_ => this.JSRuntime)
            .AddSingleton<ILoggerFactory>(_ => LoggerFactory)
            .AddSingleton(typeof(ILogger<>), typeof(Logger<>))
            .AddSingleton<HttpClient>(_ => this.GlobalServices.GetRequiredService<HttpClient>())
            .AddSingleton<NavigationManager>(_ => this.NavigationManager)
            .AddSingleton<GlobalServiceProvider>(_ => new(this.GlobalServices))
            .AddHotKeys2()
            .AddScoped<HelperScript>()
            .AddScoped<CommandService>()
            .AddScoped<NavigationService>()
            .AddScoped<AddonsStore>(_ => this._AddonsStore)
            .AddScoped<BlazingStoryOptions>(_ => this._Options)
            .AddScoped<WebAssets>()
            .AddTransient<ComponentActionLogs>();

        if (OperatingSystem.IsBrowser())
            services.AddSingleton<IXmlDocComment, XmlDocCommentForWasm>();
        else
            services.AddSingleton<IXmlDocComment, XmlDocCommentForServer>();

        var serviceProvider = services.BuildServiceProvider();
        return serviceProvider.CreateAsyncScope();
    }

    protected override async Task OnParametersSetAsync()
    {
        await base.OnParametersSetAsync();

        this._Options.EnableHotReloading = this.EnableHotReloading;

        if (this.AvailableColorSchemes != this._PrevAvailableColorSchemes)
        {
            this._PrevAvailableColorSchemes = this.AvailableColorSchemes;
            if (this._firstRendered) await this.UpdatePreferesColorSchemeAsync();
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender) return;
        this._firstRendered = true;

        await this.UpdatePreferesColorSchemeAsync();

        this._PreferesColorSchemeChangeSubscriber = await this._JSModule.InvokeAsync<IJSObjectReference>("subscribePreferesColorSchemeChanged", this._RefThis, nameof(OnPreferesColorSchemeChanged));

        // Init Level 0 -> Default Background is visible & Color Scheme Container is hidden and transparent.

        await this._JSModule.InvokeVoidAsync("ensureAllFontsAndStylesAreLoaded");

        // Init Level 1 -> The Default Background is still visible & Color Scheme Container is becoming to be VISIBLE but still transparent.
        this._InitLevel++;
        this.StateHasChanged();

        await Task.Delay(50);

        // Init Level 2 -> The Default Background is still visible & Color Scheme Container transitions to OPAQUE in 0.2sec.
        this._InitLevel++;
        this.StateHasChanged();

        await Task.Delay(200);

        // Init Level 3 -> After the Color Scheme Container transitioned to opaque, The Default Background transitions to INVISIBLE.
        this._InitLevel++;
        this.StateHasChanged();
    }

    private async ValueTask UpdatePreferesColorSchemeAsync()
    {
        if (!this._ServiceScope.HasValue) throw new InvalidOperationException("The service provider is not initialized.");

        if (this.AvailableColorSchemes == AvailableColorSchemes.Both)
        {
            var helperScript = this._ServiceScope.Value.ServiceProvider.GetRequiredService<HelperScript>();
            var colorScheme = await helperScript.GetLocalStorageItemAsync("ColorScheme", defaultValue: "system");
            if (colorScheme != "dark" && colorScheme != "light")
            {
                colorScheme = await this._JSModule.InvokeAsync<string>("getPrefersColorScheme");
            };
            this._PreferesColorScheme = colorScheme;
        }
        else
        {
            this._PreferesColorScheme = this.AvailableColorSchemes switch
            {
                AvailableColorSchemes.Light => "light",
                AvailableColorSchemes.Dark => "dark",
                _ => throw new InvalidOperationException($"The {nameof(this.AvailableColorSchemes)} is invalid."),
            };
        }
    }

    [JSInvokable, EditorBrowsable(EditorBrowsableState.Never)]
    public async Task OnPreferesColorSchemeChanged(string preferesColorScheme)
    {
        await this.UpdatePreferesColorSchemeAsync();
        this.StateHasChanged();
    }

    public async ValueTask DisposeAsync()
    {
        await this._PreferesColorSchemeChangeSubscriber.DisposeIfConnectedAsync("dispose");
        this._RefThis.Dispose();
        await this._JSModule.DisposeAsync();
        if (this._ServiceScope.HasValue) await _ServiceScope.Value.DisposeAsync();
    }
}