<div class="history">

    <div class="caption sub-heading">
        Recently opened
    </div>

    <!-- Max 8 items -->
    <NavigationList Items="this._HistoryItems" OnClickItem="this.OnClickHistoryItem" GetIconType="GetIconType" GetCssClass="GetCssClass">
        <Actions>
            <div class="action" @onclick="BackToComponents" @onpointerenter="@(() => context.OnHover("back-to-components"))" aria-selected="@context.IsSelected("back-to-components")">
                <SvgIcon Type="SvgIconType.NavigationBack" />
                <span class="text">Back to components</span>
                <KeyMap Key="new (Code.Escape)" FreeSize="true" />
            </div>

            <div class="action" @onclick="ClearHistory" @onpointerenter="@(() => context.OnHover("clear-history"))" aria-selected="@context.IsSelected("clear-history")">
                <SvgIcon Type="SvgIconType.TrashCan" />
                <span class="text">Clear history</span>
            </div>
        </Actions>
    </NavigationList>

</div>

@code
{
    [Parameter]
    public EventCallback ExitHistoryView { get; set; }

    [CascadingParameter]
    protected IServiceProvider Services { get; init; } = default!;

    private NavigationService? _NavigationService;

    private IEnumerable<NavigationListItem> _HistoryItems = Enumerable.Empty<NavigationListItem>();

    protected override async Task OnInitializedAsync()
    {
        this._NavigationService = this.Services.GetRequiredService<NavigationService>();
        this._HistoryItems = await this._NavigationService.GetHistoryItemsAsync();
    }

    private SvgIconType GetIconType(NavigationItemType itemType) => itemType switch
    {
        NavigationItemType.Component => SvgIconType.Component,
        NavigationItemType.Story => SvgIconType.Component,
        _ => SvgIconType.Document
    };

    private string GetCssClass(NavigationItemType itemType) => itemType switch
    {
        NavigationItemType.Component => "type-component",
        NavigationItemType.Story => "type-component",
        _ => "type-docs"
    };

    private async Task OnClickHistoryItem(NavigationListItem historyItem)
    {
        this._NavigationService?.NavigateTo(historyItem);
        await this.ExitHistoryView.InvokeAsync();
    }

    private async Task BackToComponents()
    {
        await this.ExitHistoryView.InvokeAsync();
    }

    private async Task ClearHistory()
    {
        if (this._NavigationService == null)
        {
            return;
        }

        await this._NavigationService.ClearHistoryAsync();
        await this.ExitHistoryView.InvokeAsync();
    }
}