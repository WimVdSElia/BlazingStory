@implements IAsyncDisposable

<div class="search-and-history">

    <SearchField @bind-SearchText="this._SearchText" Focus="OnFocus" Cleared="OnCleared" />

    @if (this.SearchMode)
    {
        @if (string.IsNullOrEmpty(this._SearchText))
        {
            <History ExitHistoryView="ExitSearchMode" />
        }
        else
        {
            <SearchResult SearchText="@this._SearchText" ExitSearchView="ExitSearchMode" />
        }
    }

</div>

@code
{
    [Parameter]
    public bool SearchMode { get; set; } = false;

    [Parameter]
    public EventCallback<bool> SearchModeChanged { get; set; }

    [CascadingParameter]
    protected IServiceProvider Services { get; init; } = default!;

    private string? _SearchText;

    private HotKeysContext? _HotKeysContext;

    public async ValueTask DisposeAsync()
    {
        if (this._HotKeysContext is not null)
        {
            await this._HotKeysContext.DisposeAsync();
        }
    }

    private async Task OnFocus()
    {
        this.SearchMode = true;
        await this.SearchModeChanged.InvokeAsync(this.SearchMode);

        if (this._HotKeysContext is not null)
        {
            await this._HotKeysContext.DisposeAsync();
        }

        this._HotKeysContext = this.Services
            .GetRequiredService<HotKeys>()
            .CreateContext()
            .Add(Code.Escape, this.OnEscapeKeyPressed, exclude: Exclude.None);
    }

    private async Task OnCleared()
    {
        await this.ExitSearchMode();
    }

    private async ValueTask OnEscapeKeyPressed()
    {
        if (!string.IsNullOrWhiteSpace(this._SearchText))
        {
            this._SearchText = "";
            this.StateHasChanged();
            return;
        }

        this._SearchText = "";
        await this.ExitSearchMode();
    }

    private async Task ExitSearchMode()
    {
        this.SearchMode = false;

        if (this._HotKeysContext is not null)
        {
            await this._HotKeysContext.DisposeAsync();
        }

        this._HotKeysContext = null;
        await this.SearchModeChanged.InvokeAsync(this.SearchMode);

        var helperScript = this.Services.GetRequiredService<HelperScript>();
        await helperScript.InvokeVoidAsync("releaseFocus");
    }
}