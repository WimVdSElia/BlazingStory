<div class="navigation-tree">
    @if (this.Item != null)
    {
        @foreach (var item in this.Item.SubItems)
        {
            var key = item.Type + "/" + string.Join('/', item.PathSegments) + "/" + item.Caption;
            var href = this._NavigationService?.GetNavigationUrl(item);
            var style = $"padding-left: calc({this.IndentLevel} * var(--bs-sidebar-nav-indent-size));";
            var tabIndex = this.SubHeading ? "unset" : "-1";
            var active = (item.Type is NavigationItemType.Docs or NavigationItemType.Story) && (this.RouteData?.RouteToStoryOrDocs == true) && (this.RouteData?.Path == item.NavigationPath);

            <div @key="key" class="navigation-tree-item @CssClass(new {item.Expanded, Type = item.Type.ToString(), active })">

                @* .caption *@
                <div class="@CssClass("caption", new {this.SubHeading})">
                    @if (item.Type is NavigationItemType.Container or NavigationItemType.Component)
                    {
                        @* .action *@
                        <button class="action" tabindex="@tabIndex" @onclick="(() => ToggleItemExpansion(item))" style="@style">
                            @NavigationTreeItemContent(item)
                        </button>
                    }
                    else
                    {
                        @* .action *@
                        <a href="@href" class="action" tabindex="@tabIndex" style="@style">
                            @NavigationTreeItemContent(item)
                        </a>
                    }

                    @if (this.SubHeading)
                    {
                        @* .sub-heading-action *@
                        var subHeadingActionIcon = item.IsExpandedAll ? SvgIconType.CollapseAll : SvgIconType.ExpandAll;
                        <button class="sub-heading-action" @onclick="() => item.ToggleSubItemsExpansion()">
                            <SvgIcon Type="subHeadingActionIcon" />
                        </button>
                    }
                </div>

                <div class="sub-items">
                    <NavigationTreeItemComponent Item="item" IndentLevel="@(this.SubHeading ? this.IndentLevel : this.IndentLevel + 1)" ExpansionChanged="(() => this.ExpansionChanged.InvokeAsync())" />
                </div>
            </div>
        }
    }
</div>

@code {
    private RenderFragment<NavigationTreeItem> NavigationTreeItemContent => (NavigationTreeItem item) =>
    @<text>
        <span class="chevron"></span>
        <span class="icon">
            <SvgIcon Type="GetIconType(item)" />
        </span>
        @item.Caption
    </text>
    ;

    [CascadingParameter]
    public QueryRouteData? RouteData { get; set; }

    [Parameter, EditorRequired]
    public NavigationTreeItem? Item { get; set; }

    [Parameter]
    public bool SubHeading { get; set; }

    [Parameter]
    public int IndentLevel { get; set; }

    [Parameter]
    public EventCallback ExpansionChanged { get; set; }

    [CascadingParameter]
    protected IServiceProvider Services { get; init; } = default!;

    private NavigationService? _NavigationService;

    protected override void OnInitialized()
    {
        this._NavigationService = this.Services.GetRequiredService<NavigationService>();
    }

    private static SvgIconType GetIconType(NavigationTreeItem item)
    {
        return item.Type switch
        {
            NavigationItemType.Component => SvgIconType.Component,
            NavigationItemType.Docs => SvgIconType.Document,
            NavigationItemType.Story => SvgIconType.BookmarkHollow,
            _ => SvgIconType.Folder
        };
    }

    private async Task ToggleItemExpansion(NavigationTreeItem item)
    {
        item.Expanded = !item.Expanded;
        await this.ExpansionChanged.InvokeAsync();

        if (item.Type == NavigationItemType.Component && item.Expanded && item.SubItems.Any())
        {
            var storyItemOf1st = item.SubItems.First();
            this._NavigationService?.NavigateTo(storyItemOf1st);
        }
    }
}
