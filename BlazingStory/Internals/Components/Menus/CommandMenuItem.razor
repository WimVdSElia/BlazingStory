@implements IDisposable

@if (this.Command != null)
{
    var hotKey = this.Command.HotKey;
    var hasHotkey = hotKey != null && hotKey.Code != "";

    <div class="menu-item command-menu-item @CssClass(new{ Active = this.Command.Flag == true, hasHotkey})" @onclick="OnClickMenuItem">
        <span class="check-mark-area">
            @if (this.Command.Flag == true)
            {
                <span><SvgIcon Type="SvgIconType.Check" /></span>
            }
        </span>
        <span class="command-title">@this.Command.Title</span>
        <span class="hotkey-area">
            @if (hasHotkey)
            {
                <KeyMap Key="hotKey" />
            }
        </span>
    </div>
}

@code
{
    [Parameter, EditorRequired]
    public Command? Command { get; set; }

    public void Dispose()
    {
        if (this.Command == null)
        {
            return;
        }

        this.Command.StateChanged -= this.Command_StateChanged;
    }

    protected override void OnInitialized()
    {
        if (this.Command == null)
        {
            return;
        }

        this.Command.StateChanged += this.Command_StateChanged;
    }

    private async Task OnClickMenuItem()
    {
        if (this.Command == null)
        {
            return;
        }

        await this.Command.InvokeAsync();
    }

    private void Command_StateChanged(object? sender, EventArgs args)
    {
        this.StateHasChanged();
    }
}