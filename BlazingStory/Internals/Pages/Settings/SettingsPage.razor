<ToolBar>
    <TabButtonGroup>
        @foreach (var panel in _SettingsPanels)
        {
            <TabButton @key="panel.Caption" OnClick="() => this.OnClickTabButton(panel.Route)" Active="this.IsActive(panel.Route)">
                @panel.Caption
            </TabButton>
        }
    </TabButtonGroup>

    <Spacer />

    <IconButton Icon="SvgIconType.CircleClose" OnClick="OnClickCloseButton" Title="Close settings page" />

</ToolBar>

<div class="settings-page-panel">
    <div class="viewport">
        <div>
            <QueryRouteView Routes="_SettingsPanels.Select(r => r.Route)" />
        </div>

        <footer>
            <a href="https://github.com/jsakamoto/BlazingStory" target="_blank">GitHub</a>
        </footer>
    </div>
</div>

@code
{
    [CascadingParameter]
    public QueryRouteData? RouteData { get; set; }

    [CascadingParameter]
    internal IServiceProvider Services { get; init; } = default!;

    [Inject] private NavigationManager? NavigationManager { get; set; }

    private static readonly (string Caption, QueryRoute Route)[] _SettingsPanels = new (string, QueryRoute)[]
    {
        ("About",              new("*", "about",         typeof(AboutPanel))),
        ("Release notes",      new("*", "release-notes", typeof(ReleaseNotesPanel))),
        ("Keyboard shortcuts", new("*", "shortcuts",     typeof(KeyboardShortcutsPanel))),
    };

    private void OnClickTabButton(QueryRoute route)
    {
        if (this.NavigationManager is not null)
        {
            this.NavigationManager.NavigateTo($"./?path=/settings/{route.Parameter}");
        }
    }

    private bool IsActive(QueryRoute route)
    {
        return route.Parameter == this.RouteData?.Parameter;
    }

    private void OnClickCloseButton()
    {
        var navService = this.Services.GetRequiredService<NavigationService>();
        navService.BackToLastNavigated();
    }
}