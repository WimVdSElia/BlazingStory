@using BlazingStory.Internals.Pages.Canvas.Controls.ParameterControllers

<div class="controls-panel">
    <table>
        <thead>
            <tr>
                <th class="name">Name</th>
                @if (this.ShowDetails)
                {
                    <th class="description">Description</th>
                    <th class="default">Default</th>
                }
                <th class="control">
                    <span>Control</span>
                    <ResetButton Class="reset-button" OnClick="ResetControls" />
                </th>
            </tr>
        </thead>

        <tbody>
            @foreach (var parameter in this.GetParameters())
            {
                var argumentValue = GetArgumentValue(parameter.Name);
                var key = this.GetKey(parameter);
                <tr @key="key">

                    <td class="name">
                        <span>@parameter.Name</span>
                        @if (parameter.Required)
                        {
                            <span class="required" title="Required">*</span>
                        }
                    </td>

                    @if (this.ShowDetails)
                    {
                        <td class="description">

                            <div class="parameter-summary">
                                @parameter.Summary
                            </div>

                            <div class="parameter-type-holder">
                                @foreach (var typeString in parameter.GetParameterTypeStrings())
                                {
                                    <span class="parameter-type">
                                        @typeString
                                    </span>
                                }
                            </div>
                        </td>
                        <td class="default">
                            <!-- TODO: Default -->
                        </td>
                    }

                    <td class="control">
                        <ParameterController Key="@key"
                                             Parameter="parameter"
                                             Value="argumentValue"
                                             OnInput="(args) => OnInputAsync(args.Value, args.Parameter)" />
                    </td>
                </tr>
            }
        </tbody>
    </table>
</div>

@code
{
    [Parameter, EditorRequired]
    public Story? Story { get; set; }

    [Parameter]
    public bool ShowDetails { get; set; }

    private Story? _LastShownStory;

    protected override async Task OnParametersSetAsync()
    {
        await base.OnParametersSetAsync();

        if (this._LastShownStory != this.Story)
        {
            foreach (var param in this.GetParameters())
            {
                await param.UpdateSummaryFromXmlDocCommentAsync();
            }

            this._LastShownStory = this.Story;
        }
    }

    /// <summary>
    /// Get parameters of the component from the current story.
    /// </summary>
    private IEnumerable<ComponentParameter> GetParameters()
    {
        return this.Story?.Context.Parameters ?? Enumerable.Empty<ComponentParameter>();
    }

    private string GetKey(ComponentParameter parameter)
    {
        return (this.Story?.NavigationPath ?? "") + ":" + parameter.Name;
    }

    private object? GetArgumentValue(string parameterName)
    {
        return this.Story?.Context.Args.TryGetValue(parameterName, out var value) == true ? value : default;
    }

    private async Task ResetControls()
    {
        if (this.Story == null)
        {
            return;
        }

        await this.Story.Context.ResetArgumentsAsync();
    }

    private async Task OnInputAsync(object? value, ComponentParameter parameter)
    {
        if (this.Story == null)
        {
            return;
        }

        await this.Story.Context.AddOrUpdateArgumentAsync(parameter.Name, value);
    }
}
