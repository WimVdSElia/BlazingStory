@implements IDisposable
@using System.Text.RegularExpressions;
@using BlazingStory.Internals.Pages.Canvas.Controls

@{
    var frameArguments = this.AddonsStore.GetFrameArguments(AddonType.DocsPage);
}
<PageTitle>@this._PageTitle</PageTitle>

<div class="docs-page stack vertical">

    <ToolBar Visible="this._Commands.ToolbarVisible?.Flag == true">
        @if (this._Commands.ShowSidebar?.Flag == false)
        {
            <IconButton Icon="SvgIconType.Sidebar" Command="this._Commands.ShowSidebar" />
            <Separator />
        }

        @* -- Render Add-On's Toolbar Contents -- *@
        @foreach (var addon in this.AddonsStore.GetAddons(AddonType.DocsPage))
        {
            <text>@addon.ToolbarContents</text>
        }

        <Spacer />

        @if ((this._Commands.Fullscreen?.Flag ?? true) == true)
        {
            <IconButton Icon="SvgIconType.CircleClose" Command="this._Commands.Fullscreen" Title="Exit full screen [{0}]" />
        }
        else
        {
            <IconButton Icon="SvgIconType.FullScreen" Command="this._Commands.Fullscreen" />
        }

    </ToolBar>

    <div class="docs-main fill">
        @if (this._StoryComponent != null)
        {
            var firstStory = this._StoryComponent.Stories.FirstOrDefault();
            <div class="docs-contents">

                <h1>@this._StoryComponent.Title.Split('/').Last()</h1>

                <!-- Summary from the XML document comment -->
                <p class="summary">
                    @this._StoryComponent.Summary
                </p>

                @if (firstStory != null)
                {
                    <div @key="@(firstStory.NavigationPath + ":first-story")" class="first-story">
                        <StoryPreview Story="firstStory" EnableZoom="true" Globals="frameArguments" />

                        <ControlsPanel Story="firstStory" ShowDetails="true" />
                    </div>
                }

                <h2>Stories</h2>

                @foreach (var story in this._StoryComponent.Stories)
                {
                    <div @key="story.NavigationPath">

                        <h3>@story.Name</h3>
                        @story.Description
                        <StoryPreview Story="story" EnableZoom="false" Globals="frameArguments" />
                    </div>
                }
            </div>
        }
    </div>
</div>

@code
{
    [CascadingParameter]
    protected AddonsStore AddonsStore { get; init; } = default!;

    [CascadingParameter]
    protected StoriesStore StoriesStore { get; init; } = default!;

    [CascadingParameter]
    protected QueryRouteData RouteData { get; init; } = default!;

    [CascadingParameter]
    protected IServiceProvider Services { get; init; } = default!;

    [CascadingParameter]
    protected BlazingStoryApp BlazingStoryApp { get; init; } = default!;

    private string? _CurrentNavigationPath;

    private string _PageTitle = "";

    private StoryContainer? _StoryComponent;

    private (Command? ToolbarVisible, Command? ShowSidebar, Command? Fullscreen) _Commands = default;

    private readonly Subscriptions _Subscriptions = new();

    protected override async Task OnParametersSetAsync()
    {
        await base.OnParametersSetAsync();

        if (this._CurrentNavigationPath != this.RouteData.Parameter)
        {
            if (this._StoryComponent != null)
            {
                foreach (var story in this._StoryComponent.Stories) story.Context.ArgumentChanged -= this.Context_ArgumentChanged;
                this._StoryComponent = null;
            }

            this._CurrentNavigationPath = this.RouteData.Parameter;
            var navigationPath = Regex.Replace(this.RouteData.Parameter, "--docs$", "");
            if (!this.StoriesStore.TryGetComponentByPath(navigationPath, out var component)) return;

            this._StoryComponent = component;
            this._PageTitle = string.Join(" / ", component.Title.Split('/')) + " - Docs - " + this.BlazingStoryApp.Title;

            foreach (var story in this._StoryComponent.Stories) story.Context.ArgumentChanged += this.Context_ArgumentChanged;

            await this._StoryComponent.UpdateSummaryFromXmlDocCommentAsync();
        }
    }

    protected override void OnInitialized()
    {
        this.AddonsStore.OnFrameArgumentsChanged += AddonsStore_OnFrameArgumentsChanged;

        var commands = this.Services.GetRequiredService<CommandService>();
        this._Commands = (
            ToolbarVisible: commands[CommandType.ToolBarVisible],
            ShowSidebar: commands[CommandType.SideBarVisible],
            Fullscreen: commands[CommandType.GoFullScreen]);
        this._Subscriptions.Add(this._Commands.ToolbarVisible!.Subscribe(this.OnToggleToolbarVisible));
    }

    private ValueTask Context_ArgumentChanged()
    {
        this.StateHasChanged();
        return ValueTask.CompletedTask;
    }

    private void AddonsStore_OnFrameArgumentsChanged(object? sender, EventArgs args)
    {
        this.StateHasChanged();
    }

    private async ValueTask OnToggleToolbarVisible()
    {
        this._Commands.ToolbarVisible?.ToggleFlag();
        await ValueTask.CompletedTask;
    }

    public void Dispose()
    {
        this.AddonsStore.OnFrameArgumentsChanged -= AddonsStore_OnFrameArgumentsChanged;
        this._Subscriptions.Dispose();
        if (this._StoryComponent != null)
        {
            foreach (var story in this._StoryComponent.Stories) story.Context.ArgumentChanged -= this.Context_ArgumentChanged;
        }
    }
}