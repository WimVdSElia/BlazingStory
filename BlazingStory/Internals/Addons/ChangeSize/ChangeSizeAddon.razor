@implements IAddonComponent

<AddonToobarContents @ref="_ToobarContentsRef">
    @{
        var orientationInitial = this._CurrentState.Orientation.ToString().Substring(0, 1);
        var sizes = this.GetSizes();
        var toolButtonText = this.Active ? $"{this.DisplayName} ({orientationInitial})" : "";
    }
    <PopupMenu MarginTop="6">
        <Trigger>
            <IconButton Icon="SvgIconType.ChangeSize" Title="Change the size of the preview" Active="this.Active" Text="@toolButtonText" />
        </Trigger>
        <MenuItems>
            @if (this.Active)
            {
                <MenuItem OnClick="@(() => OnClickSize(SizeType.None))">
                    Reset viewport
                </MenuItem>
            }
            <MenuItem OnClick="@(() => OnClickSize(SizeType.SmallMobile))">
                Small mobile
            </MenuItem>
            <MenuItem OnClick="@(() => OnClickSize(SizeType.LargeMobile))">
                Large mobile
            </MenuItem>
            <MenuItem OnClick="@(() => OnClickSize(SizeType.Tablet))">
                Tablet
            </MenuItem>
        </MenuItems>
    </PopupMenu>

    @if (this._CurrentState.Size != SizeType.None)
    {
        <div class="stack horizontal" style="align-items:center;">
            <span class="toolbar-content-text">@sizes.Size1</span>
            <IconButton Icon="SvgIconType.Swap" Title="Rotate viewport" OnClick="OnClickRotateViewport" />
            <span class="toolbar-content-text">@sizes.Size2</span>
        </div>
    }

</AddonToobarContents>

@if (this.Active)
{
    var sizes = this.GetSizes();
    <style>
        .canvas-container .preview-frame iframe {
            box-shadow: 0 0 100px 100vw rgb(0 0 0 / 50%);
            border: 1px solid black !important;
            margin: 10px;
            width: @(sizes.Size1)px !important;
            height: @(sizes.Size2)px !important;
        }
    </style>
}

@code
{
    [CascadingParameter]
    public required AddonsStore AddonsStore { get; init; }

    [CascadingParameter]
    internal IServiceProvider Services { get; init; } = default!;

    private AddonToobarContents? _ToobarContentsRef;

    public AddonType AddonType { get; } = AddonType.CanvasPage;

    public int ToolbuttonOrder { get; } = 500;

    public RenderFragment? ToolbarContents => this._ToobarContentsRef?.ChildContent;

    public IReadOnlyDictionary<string, object?> FrameArguments { get; } = new Dictionary<string, object?>();

    private HelperScript HelperScript = default!;

    private readonly IReadOnlyDictionary<SizeType, (string DisplayName, int ShrotSide, int LongSide)> SizeTypeToDetail = new Dictionary<SizeType, (string, int, int)>
        {
            [SizeType.None] = ("", 0, 0),
            [SizeType.SmallMobile] = ("Small mobile", 320, 568),
            [SizeType.LargeMobile] = ("Large mobile", 414, 896),
            [SizeType.Tablet] = ("Tablet", 834, 1112),
        };

    private class SizeState
    {
        public SizeType Size = SizeType.None;
        public Orientation Orientation = Orientation.Portrait;
    }

    private const string StorageKey = "Addons.ChangeSize.State";

    private SizeState _CurrentState = new();

    private bool Active => this._CurrentState.Size != SizeType.None;

    private string DisplayName => this.SizeTypeToDetail[this._CurrentState.Size].DisplayName;


    private (int Size1, int Size2) GetSizes()
    {
        var sizeDetail = this.SizeTypeToDetail[this._CurrentState.Size];
        var orientation = this._CurrentState.Orientation;
        return (
            Size1: orientation == Orientation.Portrait ? sizeDetail.ShrotSide : sizeDetail.LongSide,
            Size2: orientation == Orientation.Portrait ? sizeDetail.LongSide : sizeDetail.ShrotSide
        );
    }

    protected override void OnInitialized()
    {
        this.HelperScript = this.Services.GetRequiredService<HelperScript>();
        this.AddonsStore.RegisterAddon(this);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender) return;
        this._CurrentState = await this.HelperScript.LoadObjectFromLocalStorageAsync(StorageKey, this._CurrentState);
    }

    private async Task OnClickSize(SizeType size)
    {
        if (size == SizeType.None) await Task.Delay(10);
        this._CurrentState.Size = size;
        await this.UpdateSize();
    }

    private async Task OnClickRotateViewport()
    {
        this._CurrentState.Orientation = this._CurrentState.Orientation == Orientation.Portrait ? Orientation.Landscape : Orientation.Portrait;
        await this.UpdateSize();
    }

    private async ValueTask UpdateSize()
    {
        await this.HelperScript.SaveObjectToLocalStorageAsync(StorageKey, this._CurrentState);
        this.AddonsStore.FrameArgumentsHasChanged();
    }
}